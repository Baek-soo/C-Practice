*****number*****
char : 1 byte
short : 2 byte
int : 4 byte  
long : 4 byte
float : 4 byte 자연수, 소수 모두 다 들어갈 수 있다. 자연수 일때는 10.f '.'을 붙이고 소수일 때는 1.32f만 쓴다.
double : 8 byte float보다 2배 정도 더 정확하다. 
signed char : -127부터 127
unsigned char : 0부터 255
signed short :-32767부터 32767
unsigned short : 0qnxj 65535
signed int : -32767 부터 32767
unsigned int : 0부터 65535
signed long : -2147483647부터 2147483647
unsigned long : 0부터 4294697295
signed long long : -9223372036854775807부터 9223372036854775807
unsigned long long : 0부터 18446744073709551615
long long int : -9223372036854775808부터 9223372036854775807 %lld
bool : 자료형으로 오로지 true나 false 두 가지 값만을 가진다. 


*****print, input*****
cout : 콘솔 아웃이란 뜻, 콘솔 창에 출력 (ex. cout<<input<<endl;)
cin : 콘솔 인 이라는 뜬, 콘솔 창에서 값을 입력 받음 (ex. cin>>input;)


*****list 관련*****
sort(start, end, compare) : compare를 기준으로 start 부터 end까지 정렬한다. compare가 없을 경우는 start부터 end까지 오름차순으로 정렬한다. 


*****string 관련*****
str1.at(index) : index에 숫자가 들어가게 되고, 해당위치(n)에 해당하는 문자를 반환하다.(ex. str1.at(0); "BlockDMask" --> B)
str1.operator[index] : 일반 배열처럼 대괄호를 이용해서 string 인자에 접근 할 수 있다. at과는 다르게 index 범위를 검사하지 않으므로 at함수보다 빠르다.
str1.front() : string의 첫 번째 요소를 반환한다.
str1.back() : string 맨 마지막 요소를 반환한다.
str1.size() : string 객체가 메모리에 실제 사용하고 있는 사이즈를 반환한다. 
str1.length() : string의 길이를 반환한다. 
str1.capacity() : string에 할당된 메모리 크기(byte)를 반환한다.
str1.resize(n); : string을 n 만큼의 크기로 만든다. 그 크기가 원래 사이즈보다 작다면 남은 스트링을 버리고 크다면 남은 공간은 원하는 string으로 채운다.(ex. str1.resize(10,'a') // "Block" -> " Block aaaa")
str1.shrink_to_fit(); : 낭비되고 있는 메모리(capacity)를 줄임
str1.reserve(n) : n만큼 미리 메모리를 할당해서 capacity가 사이즈에 맞게 계속 늘어나는 행위를 덜하게 해준다. -> 기능정하를 줄여준다.
str1.empty() : 비어있는지 확인
str1.begin() : string의 첫 번째 요소를 가리킨다. 
str1.end() : string의 마지막 요소를 가리킨다. 
str1.append(추가할문자열) :  추가할 문자열을 맨 끝에 추가함.
str1.append(추가할문자열, 시작위치, 개수) : 추가할 문자열의 시작 위치부터 개수만큼만 끝에 추가함.
str1.append(개수, 추가할문자) : 추가할 문자를 개수만큼 맨 끝에 추가함
str1.compare(str2) : str1과 str2를 비교한다.
str1.replace(대체할문자열의시작위치, 대체할문자열의길이, 새로운문자열)
                string str1 = "C++ is very nice!";
                string str2 = "nice";
                string str3 = "awesome";
                string::size_type index = str1.find(str2);
                if (index != string::npos) {
                    str1.replace(index, str2.length(), str3);
                }
                --> C++ is very awesome!
 

cout << str1;

*****c++ 연산자*****
https://ko.wikipedia.org/wiki/C%EC%99%80_C%2B%2B%EC%9D%98_%EC%97%B0%EC%82%B0%EC%9E%90
변수 ? 값1 : 값2; : 변수의 참/거짓을 따져서 참이면 값1을 할당하고 거짓이면 값2를 할당한다.


******정규식 표현(#include <regex>)*****
std::regex_match(str, re) : 전체 문자열 패턴 매칭 -> re과 str을 비교하여 올바른 형식인지 검사 후 true, false를 리턴 하는 함수이다. 
std::regex_search  : 문자열 검색하기
std::regex_replace(str, std::regex("a"), "c") : 문자열 치환하기 -> str에서 a를 c로 치환해준다. 
\d : 숫자를 의미, [:digit:]와 같은 의미
regex re("[A-Z]+"); : 'A'부터 'Z'까지의 문자 1개 이상이면 OK
regex re("[A-Z}{1,5}"]); : 'A'부터 'Z'까지의 문자가 최소 1개 최대 5개면 OK
regex regExp("([0-9]{1})([-]?)([0-9]{1,4})"); : 0~9까지 1개만 있고, 중간에 -가 있거나 없은 후, 0~9까지 1개부터 4개까지 있다.
stoi() : string to int로 string -> int 로 변경 가능하다.
stof() : string to float
stol() : string to long
stod() : sting to double


*****우선순위 큐(#include <queue>)*****
priority_queue<type, vector<type>, 정렬기준> 변수이름; : vector<type>이나 정렬기준은 필요없는 경우 안적어도 된다. 기본으로 생성할 시, 내림차순으로 구현된다.  
                #ex. priority_queue<int, vector<int>, greater<int>> pq; : greater<int>를 사용하게 되면 오름차순으로 구현된다.
.push(값) : queue에 '값'을 추가한다.
.size() : queue의 size를 반환한다.
.top() : queue의 우선순위가 제일 높은 값을 확인한다.
.pop() : 우선순위가 제일 높은 값을 삭제한다. 
.empty() : 우선순위 큐가 비어있는지 확인한다.


*****메모리 동적 할당*****
타입* 포인터이름 = new 타입; : 첫 번째 타입은 포인터를 선언하기 위해, 두 번째 타입은 메모리 종류를 지정하기 위해 사용된다.
delete 포인터이름; : C언어에서의 free()함수와 마찬가지로 동적으로 할당받은 메모리를 다시 반환한다.
                //ex. int* ptr_int = new int;
	                 *ptr_int = 100;

	                 double* ptr_double = new double;
	                 *ptr_double = 100.123;

	                 cout << "int형 숫자의 값은" << *ptr_int << "입니다." << endl;
	                 cout << "int형 숫자의 메모리 주소는" << ptr_int << "입니다." << endl;
	                 cout << "double형 숫자의 값은" << *ptr_double << "입니다." << endl;
	                 cout << "double형 숫자의 메모리 주소는" << ptr_double << "입니다." << endl;
                 	 delete ptr_int;
	                 delete ptr_double;